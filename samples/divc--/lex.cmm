# 1 "lexical.cmm"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 335 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "lexical.cmm" 2
# 20 "lexical.cmm"



# 42 "lexical.cmm"



# 1 "/usr/local/cmmInclude/stdlib.hmm" 1
# 20 "/usr/local/cmmInclude/stdlib.hmm"



















# 45 "lexical.cmm" 2
# 1 "/usr/local/cmmInclude/stdio.hmm" 1
# 20 "/usr/local/cmmInclude/stdio.hmm"

















struct FILE {
  int fd;                   
  int mode;                 
  char[] buf;               
  int size;                 
  int len;                  
  int cnt;                  
  boolean tty;              
  boolean eof;              
  boolean err;              
  int slot;                 
};



public boolean feof(FILE stream);

public char fgetc(FILE stream);

# 46 "lexical.cmm" 2
# 1 "./util.hmm" 1
# 20 "./util.hmm"



# 34 "./util.hmm"












public void error(char[] s);                       
public boolean isDelim(char ch);                   
public boolean isOdigit(char ch);                  


# 47 "lexical.cmm" 2
# 1 "./lexical.hmm" 1
# 20 "./lexical.hmm"



# 37 "./lexical.hmm"






# 68 "./lexical.hmm"


# 81 "./lexical.hmm"













public int     lxGetTok();            
public void    lxSetFname(char[] s);  
public char[]  lxGetFname();          
public int     lxGetLn();             
public int     lxGetVal();            
public char[]  lxGetStr();            
public void    lxSetFp(FILE p);       

# 48 "lexical.cmm" 2
# 1 "/usr/local/cmmInclude/ctype.hmm" 1
# 20 "/usr/local/cmmInclude/ctype.hmm"















public boolean isAlpha(char c);
public boolean isDigit(char c);
public boolean isPrint(char c);
public boolean isSpace(char c);
public boolean isXdigit(char c);

public char toUpper(char c);

# 49 "lexical.cmm" 2
# 1 "/usr/local/cmmInclude/string.hmm" 1
# 20 "/usr/local/cmmInclude/string.hmm"















public int strCmp(char[] s1, char[] s2);


# 50 "lexical.cmm" 2





struct RsvWord {
  char[] name;                                     
  int   tok;                                       
};
  
RsvWord[] rsvWord = {
  { "void",      1     }, { "int",       2      },
  { "char",      3     }, { "interrupt", 4     },
  { "array",     6    }, { "if",        7       },
  { "else",      8     }, { "while",     9    },
  { "for",       10      }, { "return",    11   },
  { "break",     12    }, { "continue",  13 },
  { "struct",    5   }, { "do",        14       },
  { "null",      15      }, { "boolean",   16     },
  { "true",      17     }, { "false",     18    },
  { "sizeof",    19   }, { "addrof",    20   },
  { "public",    21   }, { "ord",       22      },
  { "chr",       23      }, { "bool",      24      },
  { "typedef",   25  }
};

char nextch = '\n';                                
char ch     = '\0';                                
int  ln     = 1;                                   
int  ln2    = 0;                                   



int     val;                                       
char[]  str = array(128 + 1);                   
char[]  fname = array(128 + 1);                 
FILE  fp;                                          


char getCh() {
  ch = nextch;                                     
  if(feof(fp)) {                                   
    nextch = '\x7f';                                  
  } else {                                         
    nextch = fgetc(fp);                            
    if(nextch=='\x7f') error("");  
  }
  if (ch=='\n') ln2 = ln2 + 1;                     
  return ch;
}


void skipCom() {
  getCh();                                         
  getCh();                                         
  while(ch != '*' || nextch != '/'){               
    if (nextch == '\x7f')                             
      error("");
    getCh();                                       
  }
  getCh();                                         
  getCh();                                         
}


void skipSpc() {
    while(ch != '\n' && isSpace(ch))               
      getCh();                                     
}


void skipToEol() {
    while(ch != '\n' && ch != '\x7f')                 
      getCh();                                     
}


void skipCppCom() {
  skipToEol();                                     
}


void skipSpace(){
  while(true) {
    skipSpc();                                     
    if(ch == '/' && nextch == '*')                 
      skipCom();                                   
    else if(ch == '/' && nextch == '/')            
      skipCppCom();                                
    else if(ch == '\n' && nextch != '#')           
      getCh();                                     
    else break;                                    
  }                                                
}


int hex(char ch) {
  if (isDigit(ch)) return ord(ch) - ord('0');      
  ch = toUpper(ch);                                
  return ord(ch) - ord('A') + 10;                  
}


int getHex() {
  if (!isXdigit(ch))                               
    error("1");
  int v = 0;                                       
  while (isXdigit(ch)) {                           
    v = v*16 + hex(ch);                            
    getCh();                                       
  }
  return v;                                        
}


int getOct() {
  int val = 0;                                     
  while (isOdigit(ch)) {                           
    val = val*8 + ord(ch) - ord('0');              
    getCh();                                       
  }
  return val;                                      
}


int getDec() {
  int val = 0;                                     
  while (isDigit(ch)) {                            
    val = val*10 + ord(ch) - ord('0');             
    getCh();                                       
  }
  return val;						                           
}


int getDigit() {
  val = 0;
  if(ch=='0' && (nextch=='x' || nextch=='X')) {    
    getCh();                                       
    getCh();                                       
    val = getHex();                                
  } else if(ch=='0') {                             
    val = getOct();                                
  } else {                                         
    val = getDec();                                
  }
  return 201;                                
}


int getSharp() {
  getCh();                                         
  getCh();                                         
  skipSpc();                                       
  if (!isDigit(ch)) error("#");      
  ln2 = getDec();                                  
  skipSpc();                                       
  if (ch!='"') error("#");       
  getCh();                                         
  int i;
  for (i=0; i<=128; i=i+1) {                    
    if (ch=='"' || ch=='\n' || ch=='\x7f') break;     
    fname[i] = ch;                                 
    getCh();
  }
  fname[i]='\0';                                   
  if (ch!='"') error("#");
  skipToEol();                                     
  return 205;                                   
}


int getWord(){
  int i;
  for (i=0; !isDelim(ch) && i<128; i=i+1) {     
    str[i] = ch;                                   
    getCh();                                       
  }
  if (!isDelim(ch)) {                              
    error("");                       
  }                                                
  str[i] = '\0';                                   
  for (i=0; i<25; i=i+1) {                   
    if (strCmp(str, rsvWord[i].name)==0)           
      return rsvWord[i].tok;                       
  }                                                
  return 202;                                   
}


int getEsc() {
  int n  = 0;                                      
  getCh();                                         
  if (ch == 'n'){                                  
    n = ord('\n');                                 
    getCh();                                       
  } else if (ch == 't'){                           
    n = ord('\t');                                 
    getCh();                                       
  } else if (ch == 'r'){                           
    n = ord('\r');                                 
    getCh();                                       
  } else if (ch == 'x' || ch == 'X') {             
    getCh();                                       
    n = getHex();                                  
  } else if (isOdigit(ch)) {                       
    n = getOct();                                  
  } else if (isPrint(ch)) {                        
    n = ord(ch);                                   
    getCh();                                       
  } else error("");          
  return n;                                        
}


int getStr(){
  int i = 0;
  while (getCh()!='"' && ch!='\x7f' && i<=128){    
    if (!isPrint(ch)) {                            
      break;                                       
    } else if (ch=='\\' && nextch=='"') {          
      str[i] = '\\';                               
      i = i + 1;                                   
      str[i] = '\"';
      getCh();                                     
    } else {
      str[i] = ch;                                 
    }
    i = i + 1;
  }
  if (ch!='\"') {                                  
    error("");
  }
  getCh();                                         
  str[i] = '\0';                                   
  return 203;                                 
}


int getChar(){
  getCh();                                         
  if(ch == '\\'){                                  
    val = getEsc();                                
  }else{                                           
    val = ord(ch);                                 
    getCh();                                       
  }
  if(ch != '\'')                                   
    error("");           
  getCh();                                         
  return 204;                              
}


int getSign(){
  int tok = 256;                              
  if (ch == '=' && nextch == '=') {                
    getCh();                                       
    tok = 103;                                   
  } else if (ch == '|' && nextch == '|') {         
    getCh();                                       
    tok = 101;                                    
  } else if (ch == '&' && nextch == '&') {         
    getCh();                                       
    tok = 102;                                   
  } else if (ch == '!' && nextch == '=') {         
    getCh();                                       
    tok = 104;                                   
  } else if (ch == '<' && nextch == '=') {         
    getCh();                                       
    tok = 105;                                   
  } else if (ch == '>' && nextch == '=') {         
    getCh();                                       
    tok = 106;                                   
  } else if (ch == '<' && nextch == '<') {         
    getCh();                                       
    tok = 107;                                   
  } else if (ch == '>' && nextch == '>') {         
    getCh();                                       
    tok = 108;                                   
  } else if (ch == '+' && nextch == '+') {         
    getCh();                                       
    tok = 111;                                    
  } else if (ch == '-' && nextch == '-') {         
    getCh();                                       
    tok = 112;                                    
  } else if (ch == '.' && nextch == '.') {         
    getCh();                                       
    if (nextch == '.') {                           
      getCh();                                     
      tok = 110;                           
    } else tok = 109;                         
  } else {                                         
    tok = ord(ch);                                 
  }
  getCh();                                         
  return tok;                                      
}




public int lxGetTok(){                             
  int tok = 256;                              
  if (ch=='\0')                                    
    getCh();                                       
  skipSpace();                                     
  ln = ln2;                                        
  if(ch == '\x7f'){                                   
    tok = 255;                                   
  } else if(ch == '\n' && nextch == '#') {         
    tok = getSharp();                              
  } else if(isDigit(ch)){                          
    tok = getDigit();                              
  } else if(isAlpha(ch) || ch == '_'){             
    tok = getWord();                               
    if (tok==17) { tok=200; val=1; }     
    else if (tok==18) {tok=200; val=0;} 
  } else if(ch == '\"'){                           
    tok = getStr();                                
  } else if(ch == '\''){                           
    tok = getChar();                               
  } else{                                          
    tok = getSign();                               
  }
  return tok;                                      
}

public void lxSetFname(char[] s) {                 
  int i;
  for (i=0; i<128; i=i+1) {
    fname[i] = s[i];
    if (fname[i]=='\0') break;
  }
  if (fname[i]!='\0') error("");
}

public char[] lxGetFname() { return fname; }   

public int lxGetLn() { return ln; }            

public int lxGetVal() { return val; }          

public char[] lxGetStr() { return str; }       

public void lxSetFp(FILE p) { fp = p; }        

